package webshop.rules;

import rs.ac.uns.ftn.webshopservice.model.Buyer;
import rs.ac.uns.ftn.webshopservice.model.Product;
import rs.ac.uns.ftn.webshopservice.model.ProductCategory;
import rs.ac.uns.ftn.webshopservice.model.Order;
import rs.ac.uns.ftn.webshopservice.model.enums.BuyerCategory;
import java.util.ArrayList;
import java.util.List;

global ArrayList<Product> g_recommendations;
global ArrayList<Product> g_products;

rule "Recommend by categories"
    agenda-group "recommendations"
    salience 10
    no-loop true
    lock-on-active true
    when
        $buyer: Buyer($buyerOrders: orders)
        // TODO: pronaci prve 2 kategorije koje korisnik najvise 
        // konzumira i onda dodati sve elemente tih kategorija u g_rec
        $oftenCategories: List() from collect(
            Order($product: product) from $buyerOrders
        )

        // ovde mozes onda ici na fazon - prolazak kroz produkte i not member of $oftenCategory
        // i onda ga dodas u listu
        // $recommendedProducts: List() from collect()

    then
        g_recommendations.addAll(g_products);
        System.out.println($buyerOrders.size());
        System.out.println($oftenCategories.size());
        // System.out.println(g_recommendations.size());
        System.out.println("[DROOLS] Recommended " + g_recommendations.size() + " products by categories");
end


rule "Recommend by product discount"
    agenda-group "recommendations"
    salience 9
    no-loop true
    lock-on-active true
    when
        // This rule actually finds products that don't have any discount
        // because it is easier to remove those in 'then' part of the rule
        // than to search products with discount and query previous recommendations
        // to remove those without discount
        $productsWithoutDiscount: List() from collect(
            Product(discount == 0) from g_products // TODO: maybe it will be better to use g_recommendations, but that doesn't work for some reason
        )
    then
        g_recommendations.removeAll($productsWithoutDiscount);
        System.out.println("[DROOLS] Recommend by product discount");
end


rule "Recommend by free shipping"
    agenda-group "recommendations"
    salience 8
    no-loop true
    lock-on-active true
    when
        // First check if the user's category is REGULAR, because shipping only applies to them
        Buyer(category == BuyerCategory.REGULAR, $buyersOrders: orders)
        
        // Check if 60% of users orders have free shipping
        // If it is higher, then we will recommend products with free shipping
        Number(intValue >= 0.6 * $buyersOrders.size()) from accumulate(
            Order(product.shippingPrice == 0) from $buyersOrders,
            count()
        )
    then
        // Remove all products that don't have free shipping
        g_recommendations.removeIf(product -> ((Product)product).getShippingPrice() != 0);
        System.out.println("[DROOLS] Recommend by free shipping");
end

rule "Recommend by price range"
    agenda-group "recommendations"
    no-loop true
    lock-on-active true
    when
        // todo
        // definisait neke price rangeove manuelno 
        // i videti onda u kojima je korisnik najvise kupovao
        // a ostale stvari izbaciti iz g_rec 
    then
        // todo
end
