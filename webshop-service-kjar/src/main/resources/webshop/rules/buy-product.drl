package webshop.rules;

import rs.ac.uns.ftn.webshopservice.model.Buyer;
import rs.ac.uns.ftn.webshopservice.model.enums.BuyerCategory;
import rs.ac.uns.ftn.webshopservice.model.Product;
import rs.ac.uns.ftn.webshopservice.model.Order;


rule "GOLD buyers have 5% discount on all articles"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $order: Order(product.maxDiscount >= discount + 0.05, $discount: discount)
        $buyer: Buyer(category == BuyerCategory.GOLD)
    then
        modify($order) { setDiscount((float) ($discount + 0.05)) }
        System.out.println("[DROOLS] Added discount for GOLD buyer");
end


rule "DIAMOND buyers have 10% discount on all articles"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $order: Order(product.maxDiscount >= discount + 0.1, $discount: discount)
        $buyer: Buyer(category == BuyerCategory.DIAMOND)
    then
        modify($order) { setDiscount((float) ($discount + 0.1)) }
        System.out.println("[DROOLS] Added discount for DIAMOND buyer");
end


rule "User orders more than 1 product"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $order: Order(quantity > 1, $price: price, $quantity: quantity)
    then
        modify($order) { setPrice($order.getProduct().getPrice() * $quantity); }
        System.out.println("[DROOLS] Multiplied price because quantity is > 1");
end


rule "Regular users pay shipment"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $buyer: Buyer(category == BuyerCategory.REGULAR)
        $order: Order(product.shippingPrice != 0, $price: price)
    then
        modify($order) { setPrice($price + $order.getProduct().getShippingPrice()); }
        System.out.println("[DROOLS] Added shipping price to the order");
end


rule "Add product discount"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $order: Order(product.discount > 0, discount + product.discount <= product.maxDiscount)
    then
        modify($order) { setDiscount($order.getDiscount() + $order.getProduct().getDiscount()); }
        System.out.println("[DROOLS] Added product discount to the order");
end


rule "Quantity discount"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $order: Order(product.orderQuantityDiscount > 0, quantity >= product.orderQuantityDiscount)
    then
        modify($order) { setDiscount($order.getDiscount() + $order.getProduct().getQuantityDiscount()); }
        System.out.println("[DROOLS] Added quantity discount");
end


rule "Coupon discount"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $order: Order(
            product.couponDiscount > 0, 
            usersCoupon == product.coupon,
            $couponDiscount: product.couponDiscount
        )
    then
        modify($order) { setDiscount($order.getDiscount() + $couponDiscount) }
        System.out.println("[DROOLS] Added coupon discount");
end


rule "Discount for frequent customers"
    agenda-group "order-discounts"
    no-loop true
    lock-on-active true
    when
        $buyer: Buyer($buyersOrders: orders)
        $order: Order($storeName: product.store.name, $frequentBuyerDiscount: product.store.frequentBuyerDiscount)
        $numOfOrders: Number(intValue >= 10) from accumulate(
            Order(product.store.name == $storeName) from $buyersOrders,
            count()
        )
    then
        modify($order) { setDiscount($order.getDiscount() + $frequentBuyerDiscount) }
        System.out.println("[DROOLS] Discount for frequent customers. Num.of orders in this store: " + $numOfOrders);
end
